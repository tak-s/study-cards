name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y fonts-dejavu-core fonts-noto-cjk
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test application startup
      run: |
        # Test if the application starts without errors
        timeout 10s python app.py || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
        echo "Application started successfully"
    
    - name: Test PDF generation (basic)
      run: |
        # Test if ReportLab works with Japanese fonts
        python -c "
import sys
sys.path.append('.')
from app import setup_fonts
result = setup_fonts()
print(f'Font setup result: {result}')
"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
        
    - name: Check for hardcoded secrets
      run: |
        # Basic check for potential secrets
        if grep -r "password\|secret\|key\|token" . --exclude-dir=.git --exclude-dir=.github --exclude="*.md" --exclude="*.yml" | grep -v "# " | head -5; then
          echo "⚠️  Potential hardcoded secrets found - please review above"
          echo "ℹ️  This is just a warning, not necessarily a security issue"
        else
          echo "✅ No obvious hardcoded secrets found"
        fi
